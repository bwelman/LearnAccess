# Exploring Candy database {#sec-explore}

```{r, file = "R/webex.R", include = FALSE}
```

::: callout
**OBJECTIVES**

-   Understanding sample database `{{< var database >}}`.
-   What to do with security alerts.
-   The windows and navigation options within Access.
-   The display capabilities of tables, forms, reports and queries.
-   How a command button works on a form.
-   How to search, sort and filter a record.
-   Printing tables, queries, forms and reports.
:::

The course is built around the sample file `{{< var database >}}`. This chapter explains the design and use of the tables in the database. You are going to experiment with this sample database, you go some experimenting to discover different aspects of working with Access. Some of the features are further explored in other chapters.

## Example database Candy {#sec-explore-about}

The example database `{{< var database >}}` contains data of the company SNOOPY, a company that sells boxes with pralines to customers. In the boxes are different types of pralines. The information is kept in 6 tables:

-   [Customers]{.varname}
-   [Orders]{.varname}
-   [OrderDetails]{.varname}
-   [Boxes]{.varname}
-   [BoxDetails]{.varname}
-   [Pralines]{.varname}

![Design database Candy.](images/explore/example-db-design.png){#fig-example-db-design}

The customer data are in the table [Customers]{.varname}. The orders of the customers are stored in the tables [Orders]{.varname} and [OrderDetails]{.varname}. The data of a box pralines, for example, name and price, are stored in the table [Boxes]{.varname}. In the table [BoxDetails]{.varname} you can find which pralines and how much of them are in each box. The table [Pralines]{.varname} contains information about the name of the pralines, chocolate type, filling, and even includes a picture.

::: callout-note
Each table should include a column or set of columns that uniquely identifies each row stored in the table. This is often a unique identification number, such as an article number or an employee number. In database terminology, this information is called the\[primary key\]of the table. The value of the primary key can occur only once in the table. Duplicate values for the primary key are prohibited. Most of the tables have a primary key consisting of one field, but sometimes it is necessary to combine fields to achieve a unique combination. In the tables [Customers]{.varname}, [Orders]{.varname}, [Boxes]{.varname}, and [Pralines]{.varname} the key is one field. In the tables [OrderDetails]{.varname} and [BoxDetails]{.varname} two fields are required for the key. See  @fig-example-db-design.
:::

The six tables are shortly discussed below.

### Table Customers {#sec-explore-table-customers}

![Table Customers.](images/explore/table-customers.png){#fig-table-customers}

Various details of a customer are stored in the table [Customers]{.varname}. Every customer has a unique customer code. The field [CustomerCode]{.varname} is the primary key of the table. Each row of a table is called a record. Customers are sorted by the values of the primary key.

> Check that there are 325 customers in table [Customers]{.varname}.

### Table Orders {#sec-explore-table-orders}

![Table Orders.](images/explore/table-orders.png){#fig-table-orders}

In the table [Orders]{.varname} is [OrderCode]{.varname} the primary key, the value of [OrderCode]{.varname} is unique. A certain value of [CustomerCode]{.varname} can appear more than once in this table because a customer can have multiple orders. An order is always associated with one customer.

> Check that there are 784 orders in table [Orders]{.varname}.

### Table OrderDetails {#sec-explore-table-orderdetails}

![Table OrderDetails.](images/explore/table-orderdetails.png){#fig-table-orderdetails}

An order can contain multiple boxes, but each [BoxCode]{.varname} can only occur once in an order. However, a certain box can be ordered in multiple orders, so that a [BoxCode]{.varname} can belong to multiple values of [OrderCode]{.varname}. table [OrderDetails]{.varname} has 1537 records (order rows).

> Check that two different boxes were ordered on the order with order code 3, because the table contains two lines with order code 3. A total of three boxes were ordered on this order, two boxes with the box code CHER and 1 box with the box code NOWI.

The combination of [OrderCode]{.varname} and [BoxCode]{.varname} is always unique. Therefore, the key in the table is a combination of these two fields.

::: callout-note
The total number of ordered boxes on all orders is the sum of all the numbers in the column Quantity. This number is not present in the table. In another chapter of this course will be explained how you can calculate it.
:::

### Table Boxes {#sec-explore-table-boxes}

![Table Boxes.](images/explore/table-boxes.png){#fig-table-boxes}

In the table [Boxes]{.varname} is [BoxCode]{.varname} the key. There are 18 different boxes, each with a unique [BoxCode]{.varname}. This table is the Snoopy company's article list.

### Table BoxDetails {#sec-explore-table-boxdetails}

![Table BoxDetails.](images/explore/table-boxdetails.png){#fig-table-boxdetails}

In table [BoxDetails]{.varname} is stored what kinds of pralines and how many of them are in a certain box. So you can read that there are six kinds of pralines in box ALLS, two of each, a total of twelve pralines. In this table, the key is a combination of the fields [BoxCode]{.varname} and [PralineCode]{.varname}. The table has 84 records.

### Table Pralines {#sec-explore-table-pralines}

![Table Pralines.](images/explore/table-pralines.png){#fig-table-pralines}

In table [Pralines]{.varname}, some properties of each kind of praline are stored. The key is the field [PralineCode]{.varname}. The table has 41 records (praline types).

You can easily make some calculations based on the data from the tables.

1.  What is the average number of praline types per box? For this you have to divide the total number of records in the table [Box details]{.varname} by the total number of box types. So $\frac{84}{18}= 4.7$.

2.  What is the average number of box types per order? This can be calculated from the total number of order rows divided by the total number of orders. So $\frac{1537}{784} = 2.0$.

You can't easily calculate the average number of pralines in a box. To do that, you need the total number of pralines in all boxes. This is the sum of all numbers in the column [Quantity]{.varname} in the table [BoxDetails]{.varname}.

## Security and macros {#sec-explore-security}

How to deal with security warnings when opening a database.

Some databases such as `{{< var database >}}` contain macros. In most cases, these macros are made to carry out certain tasks in the database. However, virus writers can use these opportunities to spread a virus. When such a database is not on a trusted location or signed by a trusted publisher, then Access displays when opening the database a security warning on the opening of the database. The macros in the database are disabled.

![Security warning on opening of a database with macros.](images/common/security-warning.png){#fig-security-warning}

You can enable the macros in one of the following ways.

### Enable macros temporarily {.unnumbered}

Click in the area with the security alert on the button[Enable Content]{.uicontrol}.

This method is not recommended because every time you open the database this warning appears you to enable macros.

### Ad publisher to list with trusted publishers {.unnumbered}

If the database creator that has provided a digital certificate, you can add the creator to the list Trusted Publishers. Access automatically enables all macros that are created by this maker in all databases. This is a very secure method, but usually, only the larger companies use a digital certificate. The database `{{< var database >}}` doesn't have a digital certificate.

### Move database to a trusted location {.unnumbered}

Access provides trusted locations (folders). Macros in databases on a trusted location are automatically enabled. This is the most convenient way to work safely without interruptions by security alerts and this method is also recommended for the database `{{< var database >}}`. Perform this action as follows.

Choose [File \> Options \> Trust Center \> Trust Center Settings... \> Trusted Locations \> Add new location...]{.uicontrol}.

![Dialog box Microsoft Office trusted location.](images/common/security-trusted-location.png){#fig-security-trusted-location}

In the example the folder `C:\temp` is added as a trusted location.

### Security settings for all macros {.unnumbered}

Optionally you can change the way Access handles all macros in all databases. Perform this action as follows.

Choose [File \> Options \> Trust Center \> Trust Center Settings... \> Macro Settings]{.uicontrol}

![Dialog box Trust Center.](images/common/security-trust-center.png){#fig-security-trust-center}

It is not recommended to enable all macros, then you will lose the security control.

## Exploring database {#sec-explore-database}

For this exploration you must have opened database `{{< var database >}}`.

::: callout-note
When a security warning is displayed, you should you take action, see @sec-explore-security.
:::

![Access with the Snoopy database with opened group Tables.](images/common/access-window.png){#fig-explore-access-window}

The Navigation Pane is on the left side and in it are all objects of the database. The objects are divided into groups: [Tables]{.uicontrol}, [Queries]{.uicontrol}, [Forms]{.uicontrol}, [Reports]{.uicontrol}, [Macros]{.uicontrol}. The pane of the group [Tables]{.uicontrol} is unfolded in the example. The navigation pane itself and the panes of the groups can be folded and unfolded.

-   ![](images/common/button-object-selection.png) - selection of showed objects

-   ![](images/common/button-group-open.png) - unfolding group pane

-   ![](images/common/button-group-close.png) - folding group pane

-   ![](images/common/button-navigation-close.png) - folding navigation pane

-   ![](images/common/button-navigation-open.png) - unfolding navigation pane

Double-clicking on an object in the Navigation Pane will open the object and displays the content in a document window. When you have opened several objects then these are displayed as tabbed documents.

![Document window with the Customers and Orders tables in tabs.](images/explore/document-tabs.png){#fig-document-tabs}

::: callout-note
You can change this setting through [File \> Options \> Current Database]{.uicontrol}. In @fig-document-window-options you see the possibilities for the document windows.

![Document Window Options.](images/common/document-window-options.png){#fig-document-window-options}

When you select [Overlapping Windows]{.uicontrol}, then the objects are displayed in separate windows, above each other.
:::

If you need more space in width you can fold up the navigation pane. Do you need more space in height, then you can hide the ribbon by double-clicking on a ribbon tab. Double-clicking again on a tab unhide the ribbon.

## Exploring Tables {#sec-explore-tables}

Tables are the key components of a database since all data is stored here.

The two most important views of a table are

Datasheet View

:   In this view, you can see the contents of the records, change it, and also allows you to add new records.

Design View

:   In this view, you can see the design of the table and customize it.

::: {#prp-explore-tables}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the table [Customers]{.varname}. The table opens in Datasheet View.

3.  Put the table [Customers]{.varname} in the Design View on one of the following ways:

    -   Click in the bottom right of the program window on the button Design View ![](images/common/button-design-view.png)
    -   Choose [tab Home \> View (group Views) \> Design View]{.uicontrol}
    -   Right-clicking on the table name in the navigation pane and then choose [Design View]{.uicontrol} from the shortcut menu.

4.  Put the table [Customers]{.varname} in the Datasheet View again on one of the following ways:

    -   Click in the bottom right of the program window on the button Datasheet View ![](images/common/button-datasheet-view.png)
    -   Choose [tab Home \> View (group Views) \> Datasheet View]{.uicontrol}
    -   Right-clicking on the table name in the navigation pane and then [Open]{.uicontrol}

5.  Close the table [Customers]{.varname} via the Close button [X]{.uicontrol}, top right of the document window.

6.  Open the table [Orders]{.varname} in the Datasheet View.

::: callout-note
In the table [Orders]{.varname} is a unfold button\[+\]in front of the records. By clicking on it you see the details of the order. These data come from table OrderDetails. That the associated details of a particular order can be found is possible because in both tables the field OrderCode is present.
:::

7.  Click the unfold button at a few records to see which boxes and how much of them are ordered.

![Orders details of order 3.](images/explore/table-orders-details3.png){#fig-table-orders-details3}

8.  Close the table [Orders]{.varname}.
:::

## Exploring Forms {#sec-explore-forms}

Forms are especially important in displaying, adding, and editing data.

The most important views of a form are:

Form View

:   In this view, the information is displayed, you can edit it and enter new data.

Datasheet View A view similar to that of the table.

Design View

:   In this view, you can see the design of the form and customize it.

::: {#prp-explore-forms}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open form [Pralines]{.varname}. The form opens in the form view.

![Form View of form Pralines. The data of the first record is displayed.](images/explore/form-pralines-form-view.png){#fig-form-pralines-form-view}

3.  Put form [Pralines]{.varname} in Design View on one of the following ways:

    -   Click in the bottom right of the program window on the button Design View ![](images/common/button-design-view.png).
    -   Choose [tab Home \> View (group Views) \> Design View]{.uicontrol}
    -   Right-clicking on the form name in the navigation pane and then choose [Design View]{.uicontrol} from the shortcut menu.

![Design view of form Pralines.](images/explore/form-pralines-design-view.png){#fig-form-pralines-design-view}

::: callout-note
In the design view, you can change the layout of the form and add controls like text boxes, labels, list boxes, checkboxes, etc.
:::

4.  Put the form [Pralines]{.varname} in the Form View with ![](images/common/button-form-view.png).

5.  Browse through the records with the navigation buttons on the left bottom of the document window.

    -   ![](images/common/button-record-first.png) - First record

    -   ![](images/common/button-record-previous.png) - Previous record

    -   ![](images/common/button-record-next.png) - Next record

    -   ![](images/common/button-record-last.png) - Last record

    -   ![](images/common/button-record-new.png) - New (empty) record

6.  Close the form.
:::

## Using command button {#sec-explore-commandbutton}

The form [Boxes]{.varname} can be used for data entry but also for viewing data. On this form is a command button with the caption [Sales]{.varname}

::: {#prp-explore-commandbutton}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the form [Boxes]{.varname}.

3.  Click the button [Sales]{.varname} on the form. The form [Box sales]{.varname} is displayed. You will see all orders related to the selected box in the form [Boxes]{.varname} and even the total sales of this box.

4.  Close all forms.
:::

## Searching a record {#sec-explore-search-records}

A form may also be used to search for a record. In the following steps, you will search for a box with "autumn" in the name.

::: {#prp-explore-search-records}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the form [Boxes]{.varname}.

3.  Click in the field [Box name]{.varname} and choose on the ribbon [tab Home \>]{.uicontrol} ![](images/common/button-find.png) [Find (group Find)]{.uicontrol}. The dialog box ***Find and Replace*** is displayed.

4.  Type `autumn` in the text box [Find What]{.uicontrol} and select [Any Part of Field]{.uicontrol} in the text box [Match]{.uicontrol}.

![Dialog box find and replace.](images/explore/find-replace-dialogbox.png){#fig-find-replace-dialogbox}

5.  Click [Find Next]{.uicontrol}. The content of the box Autumn Surprise is displayed.

6.  Click [Cancel]{.uicontrol} to close the search window.

7.  Close the form.
:::

## Exploring Queries {#sec-explore-queries}

Queries are important if you want to select or summarize data from tables. A query is a specified question to the database to provide certain information.

The two most important views of a query are:

Datasheet View

:   In this view, you can see the result (data) of the query.

Design View

:   In this view, you can see the design of the query and customize it.

::: {#prp-explore-queries}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the query [Pralines per box]{.varname}.

::: callout-note
Access executes the query and produces a data sheet containing the results of the query, see @fig-query-pralines-box-datasheet.

The results of this query are derived from multiple tables. To know which tables are used, you had to go to the design view of the query.
:::

![Query pralines per box in datasheet view.](images/explore/query-pralines-box-datasheet.png){#fig-query-pralines-box-datasheet}

3.  Put the query [Pralines per box]{.varname} in the Design View on one of the following ways:

    -   Click in the bottom right of the program window on the button Design View ![](images/common/button-design-view.png).
    -   Choose [tab Home \> View (group Views) \> Design View]{.uicontrol}.
    -   Right-clicking on the query name in the navigation pane and then choose [Design View]{.uicontrol} from the shortcut menu.

![Design query Pralines per box.](images/explore/query-pralines-box-design.png){#fig-query-pralines-box-design}

::: callout-note
The upper three rectangles represent the tables that are used for this query. The line with arrows connects the field names by which two tables are related to each other.

In the lower part of this window, you will find in the first row the names of the used fields. In the third column is an expression, a kind of formula with operations on the fields. The expression formulated here is `Sum([Pralines].[PralineCosts]*[BoxDetails].[Quantity])`. Between the brackets, you see the names of the tables and fields.

To see the whole expression the column must be widened by dragging the column to the right edge.
:::

4.  Put the query in the Datasheet View.

5.  Close the query
:::

## Exploring Reports {#sec-explore-reports}

With reports, you can print the information from the tables nicely laid out on screen, display, or paper. The displayed data may be derived from multiple tables and/or queries. Also, calculated values are possible. Furthermore, you can provide a report with titles, headings, headers, and footers.

The most important views of a report are:

Report View

:   In this view, you can see the contents of the report.

Print Preview

:   The display of the report when it will be printed.

Design View

:   In this view, you can see the report of the design and customize it.

::: {#prp-explore-reports}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the report [Pralines per box]{.varname}. The report is opens in the report view.

![Report pralines per box in report view.](images/explore/report-pralines-box-report.png){#fig-report-pralines-box-report}

3.  Put the report [Pralines per box]{.varname} in Print Preview on one of the following ways:

    -   Click in the bottom right of the program window on the button \[Print Preview\] ![](images/common/button-print-preview.png)
    -   Choose [tab Home \> View (group Views) \> Print Preview]{.uicontrol}.
    -   Right-clicking on the report name in the navigation pane and then choose [Print Preview]{.uicontrol} from the shortcut menu.

4.  Put the report [Pralines per box]{.varname} in Design View on one of the following ways:

    -   Click in the bottom right of the program window on the button Design View ![](images/common/button-design-view.png)
    -   Choose [tab Home \> View (group Views) \> Design View]{.uicontrol}.
    -   Right-clicking on the report name in the navigation pane and then choose [Design View]{.uicontrol} from the shortcut menu.

![Report pralines per box in design view.](images/explore/report-pralines-box-design.png){#fig-report-pralines-box-design}

::: callout-note
In the design view, you can change the layout of the report and add controls like text boxes, labels, list boxes, checkboxes, etc.
:::

5.  Put the report in \[Report View\] with ![](images/common/button-report-view.png).

6.  Close the report
:::

## Sorting {#sec-explore-sorting}

You can sort the records in a table based on the values in one or more fields. Sorting can be in ascending and descending order.

In the next practice you need to change the table [Customers]{.varname} so that an overview is created of first the city, then the last name and then first name. The records must also be sorted in that order.

![Table Customers sort on city, last name and first name.](images/explore/table-customers-sorted.png){#fig-table-customers-sorted}

::: {#prp-explore-sorting}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the table [Customers]{.varname}. The table opens in the Datasheet View.

3.  Select the column [City]{.varname} by clicking on the column header and drag the column to the left so this will be the first column in the table.

4.  Same way, move the columns [LastName]{.varname} and [FirstName]{.varname} to respectively the 2e and 3e position in the table.

5.  Click in column [City]{.varname} on the arrow at the right side in the column header and select from the shortcut menu[Sort A to Z]{.uicontrol}

::: callout-note
Access reorganizes the records in alphabetical order by city and shows a small upward pointing arrow (![](images/common/button-arrow-down-sortedup.png)) at the right side of the column header to indicate the sort order.
:::

6.  Cancel the sorting through [tab Home \> Remove Sort (group Sort & Filter)]{.uicontrol}

7.  To sort on multiple fields, select the columns [City]{.varname}, [LastName]{.varname}, and [FirstName]{.varname}.

8.  Choose [tab Home \> Ascending ![](images/common/button-sort-ascending.png) (group Sort & Filter)]{.uicontrol}

::: callout-note
Access reorganizes the records in ascending alphabetical order, first by city, then by the last name and then by the first name. At the right side of each of the headers of these three columns, you can see the small upward pointing arrow, see @fig-table-customers-sorted.
:::

9.  Close the table [Customers]{.varname} and choose [No]{.uicontrol} on the question to save the changes.
:::

## Filtering {#sec-explore-filtering}

Filtering is a useful way to see only the data that you want to be displayed. You can use filters to display specific records in a form, report, query, or table. For example, you can easily create a filter to show all of the pralines with chocolate type Milk and filling type Marzipan. There are several ways to filter a table. A few methods will be discussed in the following practices.

### Simple filter {#sec-explore-filter-simpel}

Information need: Show all pralines with the chocolate type White.

::: {#prp-explore-filter-simpel}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open table [Pralines]{.varname}. The table Pralines opens in Datasheet View.

3.  Click in the column [ChocolateType]{.varname} on a value White.

4.  Choose [tab Home \> button Selection (group Sort & Filter) \> Equals "White"]{.uicontrol}.

::: callout-note
Access shows now the records (4 records ) whose chocolate type is white. You can see that a filtering has been applied to the table:

-   To the right of the column heading [ChocolateType]{.varname} there is now a small symbol of a filter (![](images/common/button-arrow-down-filter.png))
-   On the status bar you see ![](images/explore/statusbar-filtered.png)
:::
:::

### Modifying filter {#sec-explore-filter-modify}

Information need: Show all pralines with the chocolate type Milk.

For this, the previous filter will be changed.

::: {#prp-explore-filter-modify}
[File]{.smallcaps}: `{{< var database >}}`

1.  Click on the filter symbol at the right of the column head [ChocolateType]{.varname}.

![Dialog box filter.](images/explore/filter-chocolatetype.png){#fig-filter-chocolatetype}

2.  Select in the dialog box Milk and deselect White. Click [OK]{.uicontrol}. There are now 18 records shown, all with chocolate type Milk.

::: callout-note
The showed options in @fig-filter-chocolatetype depend on the field type. With a text field, there is a submenu [Text Filters]{.uicontrol} and with a numeric field, there is a submenu [Number Filters]{.uicontrol}.
:::
:::

### Filter on 2 criteria {#sec-explore-filter-criteria2}

Information need: Show all pralines with the chocolate type Milk and filling type Marzipan.

A second selection criterion is added for this.

::: {#prp-explore-filter-criteria2}
[File]{.smallcaps}: `{{< var database >}}`

1.  Click in column [FillingType]{.vartype} on a value Marzipan.

2.  Choose [tab Home \> Button Selection (group Sort & Filter) \> Equals "Marzipan"]{.uicontrol}.

    Three records are displayed with chocolate type Milk and with filling type Marzipan.

3.  Undo filtering through [tab Home \> button ![](images/common/button-filter-toggle.png) (group Sort & Filter)]{.uicontrol}.

::: callout-note
Filtering is removed and all records are displayed again.

Another way to remove the filter is by clicking on the button [Filtered]{.uicontrol} in the status bar. The text on the button will turn into [Unfiltered]{.uicontrol}. Clicking again applies the last used filter.
:::
:::

### Number filter {#sec-explore-filter-number}

Information need; Show all pralines with costs from \$0.25 to \$0.35.

::: {#prp-explore-filter-number}
[File]{.smallcaps}: `{{< var database >}}`

1.  Click the arrow tip at the right in column head [PralineCosts]{.varname}, choose [Number Filters \> Between...]{.uicontrol}.

![Dialog box Between Numbers.](images/explore/filter-number-between.png){#fig-filter-number-between}

2.  Enter 0.25 at [Smallest]{.uicontrol}, 0.35 at [Largest]{.uicontrol}, then click [OK]{.uicontrol}. There are now 22 records shown with bonbon costs from 0.25 to 0.35.

3.  Close the table [Pralines]{.varname} and choose [No]{.uicontrol} on the question to save the changes.
:::

## Print {#sec-explore-print}

For printing, Access uses the printers that are available in Windows.

Depending on the view in an Access object, the result can be printed. For example, you can print datasheet views at tables and queries, report views at reports, and form views at forms.

::: callout-note
There is no option for printing the design view, but Access has a tool named [Database Documenter]{.uicontrol} with which you can print the design characteristics of database objects.
:::

The print options are available through [File \> Print]{.uicontrol}. You then have the following options:

![Print options in Access.](images/common/print-options.png){#fig-print-options}

With the choice [Print Preview]{.uicontrol}, you can customize the print, such as page size, portrait or landscape, margins, ....

## Exercises {#sec-explore-exercises}

::: {#exr-expl001}
**Selection Pralines (expl001)**

Create a filter to select Pralines with chocolate type Milk or Dark
whose price is at most \$0.30.

::: {.content-visible when-format="html:js"}
`r hide("Tip")`
With numeric fields, you have several options for number ranges:

![Number filter](images/explore/expl001-filter-numbers.png)
`r unhide()`

`r hide("Answer")`
The result is 18 records.
`r unhide()`
:::

:::

::: {#exr-expl002}
**Selection Customers in city (expl002)**

Make a selection of the customers who live in Enschede, Hengelo, and
Almelo

::: {.content-visible when-format="html:js"}
`r hide("Answer")`
The result is 12 records.
`r unhide()`
:::

:::

::: {#exr-expl003}
**Selection Customers on zip code (expl003)**

Make a selection of customers whose zip code begins with 20 and is
living in Amsterdam.

::: {.content-visible when-format="html:js"}
`r hide("Tip")`
ZipCode is a text field, so you can use text filters:

![Text filter](images/explore/expl003-filter-text.png)
`r unhide()`

`r hide("Answer")`
The result is 3 records.
`r unhide()`
:::

:::
