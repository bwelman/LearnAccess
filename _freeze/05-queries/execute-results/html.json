{
  "hash": "827e7c78301faecd6b27e36570b40aca",
  "result": {
    "markdown": "# Queries {#sec-queries}\n\n::: {.callout-note appearance=\"simple\" icon=\"false\"}\n**OBJECTIVES**\n\n-   Types of queries and what you can do with them..\n-   Creating a simple select query using the wizard.\n-   Conditions in a query.\n-   Grouping and calculations in a query.\n-   Parameter query, update query, make-table query, and crosstab query.\n:::\n\nRetrieving information from a database is the most common action from end-users. To deliver the required information queries are necessary. Simple queries can be created by the end-user themselves, for more complex queries help of a professional is usually desired.\n\n## About creating queries {#sec-queries-about}\n\nThe most familiar form of a query is the select query, which is a sort of question to the database to a particular set of data. However, a query can produce more than a list of records. So there may be functions in a query that perform calculations (sum, average,...) on the data. And there are various types of queries. In this course are discussed the types:\n\nSelect query\n\n:   Retrieves data from one or more tables and displays the results in a datasheet view. You can use this query to execute records and calculations groups such as sum, average, count,... This is the most common type of query.\n\nParameter query\n\n:   The user should first give a value for one or more fields. Thereafter, the value is used to carry out a select query. An example is a list of orders from a certain date.\n\nUpdate query\n\n:   Hereby it is possible to make one or more changes to records that meet certain conditions with one action. An example is a 10% price increase for a series of products.\n\nTo create a query, it is necessary that you first specify well the information needs. After this, you can start to create the query.\n\n## Customers and orders {#sec-queries-customername-ordercodes}\n\nINFORMATION NEEDS\n\nCreate a sorted list of all customers with their last name, first name, and their order codes.\n\nANALYSIS\n\nThe last name and first name of a customer are in table [Customers]{.varname}. The order codes of a customer are in table [Orders]{.varname}. Because this is a simple straightforward select query, you can use the Query Wizard.\n\n::: {#prp-queries-customername-ordercodes}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Wizard (group Queries)]{.uicontrol}. The dialog box New Query is displayed. Here you can select the query type.\n\n3.  Select [Simple Query Wizard]{.uicontrol} and click [OK]{.uicontrol}. In the following screen, you can select the fields you want in your query.\n\n4.  Select in [Tables/Queries]{.uicontrol} through the list box [Table: Customers]{.varname}. The fields of table [Customers]{.varname} are displayed in the box [Available Fields]{.uicontrol}.\n\n![Selection Query with table Customers.](images/queries/q-wizard-t-customers.png){#fig-q-wizard-t-customers}\n\n5.  Select field [LastName]{.varname} and click ![](images/common/button-add-field.png). Field [LastName]{.varname} has been moved to box [Selected Fields]{.uicontrol}.\n\n6.  Add in the same way field [FirstName]{.varname}.\n\n7.  Select [Table: Orders]{.varname} in box [Tables/Queries]{.uicontrol}. The fields of table [Orders]{.varname} are displayed in box [Available Fields]{.uicontrol}.\n\n8.  Add field [OrderCode]{.varname}.\n\n![Wizard selection query with selected fields.](images/queries/q-customername-ordercodes-fields.png){#fig-q-customername-ordercodes-fields}\n\n9.  click [Next]{.uicontrol}. In the displayed screen you can specify if you like a detail or summary query.\n\n10. Select [Detail (shows every field of every record)]{.uicontrol} and click [Next]{.uicontrol}.\n\n11. Name the query [Customername+Ordercodes]{.varname}, select [Modify the query design]{.uicontrol}, and click [Finish]{.uicontrol}. The design of the query is displayed.\n\n12. Click in box [Sort]{.uicontrol} of column [LastName]{.uicontrol} and choose [Ascending]{.uicontrol}.\n\n![Design query customername and ordercodes.](images/queries/q-customername-ordercodes-design.png){#fig-q-customername-ordercodes-design-1}\n\n13. Switch to [Datasheet View]{.uicontrol}.\n\n![Design query customername and ordercodes.](images/queries/q-customername-ordercodes-result.png){#fig-q-customername-ordercodes-result}\n\n14. Close the query and answer the question to save the changes with[Yes]{.uicontrol}.\n:::\n\n## Criteria in queries {#sec-queries-criteria}\n\nExplanation of conditions in a query, the Like operator, and wild cards.\n\nIn a query, you can define conditions, so that only those records which meet these conditions are displayed. In the design grid, the row Criteria is available for this purpose.\n\nA criterion is similar to a formula. It is a string that may consist of field references, operators, and constants (values that are always the same). Query criteria are also called expressions. What may be formulated in a criterion depends on the data type of the field (text, numeric, date/time, yes/no).\n\n| Category    | Operators                                         |\n|-------------|---------------------------------------------------|\n| Arithmetic  | `+`, `-`, `*`, `/`, `\\`, `^`, `Mod`               |\n| Comparison  | `=`, `>`, `>=`, `<`, `<=`, `<>`                   |\n| Logical     | `And`, `Or`, `Not`, `Xor`, `Eqv`                  |\n| Aggregation | `&`, `+`                                          |\n| Special     | `Is Null`, `Is Not Null`, `Like`, `Between`, `In` |\n\n: Operators in criteria {#tbl-criteria-operators}\n\nYou can make simple criteria with this, but also very complicated.\n\nA special role is for the `Like` operator. This compares a value with a certain pattern. That pattern can be the literal string to compare with, such as Like \"North\". But the pattern may also contain wild cards, such as Like \"He\\*\". This allows the use of the operator Like very powerful.\n\nDate values must be surrounded by the symbol `#`. Some examples of date criteria: `#12/5/2010#`, `>#9/1/2010#`, `>#9/1/2010#` and `<#9/15/2010#`\n\nWild cards are placeholders for other characters, which you use when you don't know the entire search pattern but only a part. The three most common wild cards are:\n\n-   `*`: For any number of characters. Examples: `\"A*\"`, `\"*dam\"`\n\n-   `?`: For any single character. Example: `\"b?k\"`\n\n-   `#`: For any single digit. Example `\"1#5\"`\n\n[External article: Examples of query criteria](https://support.office.com/en-us/article/Examples-of-query-criteria-3197228c-8684-4552-ac03-aba746fb29d8)\n\n## Orders from Utrecht customers {#sec-queries-utrecht-dec2009}\n\nAdd manually fields and criteria to an existing and save the query under a new name.\n\nTo perform this task, it is necessary that you have performed \\@ref(queries-customername-ordercodes) .\n\nINFORMATION NEEDS\n\nMake a sorted list by last name, first name, and order codes of all customers who live in the province Utrecht and with an order date in December 2009.\n\nANALYSIS\n\nAll the required information will be provided by the query you created in \\@ref(queries-customername-ordercodes). However, there are two additional conditions (criteria):\n\n-   The field [Province]{.varname} (in table [Customers]{.varname}) should have the value `UT`.\n-   The field [OrderDate]{.varname} (in table [Orders]{.varname}) should have a value in the range12-1-2009 until 12-31-2009.\n\n::: {#prp-queries-utrecht-dec2009}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Open query Customername+Ordercodes in[Design View]{.uicontrol}.\n\n![Design query Customername+Ordercodes.](images/queries/q-customername-ordercodes-design.png){#fig-q-customername-ordercodes-design-2}\n\n3.  Drag field [Province]{.varname} from table [Customers]{.varname} to the column next to [OrderCode]{.varname}. Drag field [OrderDate]{.varname} from table [Orders]{.varname} to the next column.\n\n![Fields in the design grid.](images/queries/q-utrecht-dec2009-fields.png){#fig-q-utrecht-dec2009-fields}\n\n4.  Enter `\"UT\"` under [Province]{.varname} in box [Criteria]{.uicontrol}.\n\n5.  Enter `Like \"12\\*2009\"` under [OrderDate]{.varname} in box [Criteria]{.uicontrol}.\n\n![OrderDate with Like operator.](images/queries/q-utrecht-dec2009-criteria.png){#fig-q-utrecht-dec2009-criteria}\n\n::: callout-note\n-   The asterisk `*` is called a **wild card** and means that in this place may be arbitrary text. So the string \"12\\*2009\" should start with 12 (= month December) end with 2009.\n\n-   On computers where a Dutch date format (day-month-year) is set, you should change this in the American date format (month-day-year).\n:::\n\n6.  Switch to [Datasheet View]{.uicontrol} and check that all customers are from the province of Utrecht and that are all order data in December 2009.\n\n7.  Switch to [Design View]{.uicontrol} and uncheck[Show]{.uicontrol} for the columns [Province]{.varname} and [OrderDate]{.varname}.\n\n8.  Switch to [Datasheet View]{.uicontrol}.\n\n9.  Save the query under a different name through [File \\> Save Object as]{.uicontrol} and specify as name [Utrecht and orderdate dec 2009]{.varname}.\n\n10. click [OK]{.uicontrol} and close the query.\n:::\n\n## Customers with box CHER {#sec-queries-customers-cher}\n\nA select query with 3 tables.\n\nINFORMATION NEEDS\n\nIn the last month of the calendar year, it is established that the sell-by date of the CHER boxes is insight. Therefore the sales department wants to organize a direct mail campaign to the customers who once bought CHER boxes. Make a list of all customers with their last name, first name, and full address whoever bought at least one box CHER.\n\nCreate a list of all customers with their last name, first name, and full address who bought at least one box CHER.\n\nANALYSIS\n\nAll customer information (first name, last name, address, postcode, city ) is in the [Customers]{.varname} table. The ordered boxes can be found in the field [BoxCode]{.varname} in table OrderDetails. In order to link an order to a customer you also need the table [Orders]{.varname}. The table [Orders]{.varname} is the link between the tables [Customers]{.varname} and [OrderDetails]{.varname}. And as condition, you need to specify the value `CHER` for field [BoxCode]{.varname}.\n\nWhen using the Wizard to create the query, it is sufficient to add only the needed fields from the [Customers]{.varname} and [OrderDetails]{.varname} tables. The Wizard then automatically ensures that the [Orders]{.varname} table is added because it is the link between the tables [Customers]{.varname} and [Order Details]{.varname}. When you create the query manually from scratch, you should be self-aware to add the [Orders]{.varname} table. That is why preference is given to the use of the Wizard in this task.\n\n::: callout-note\nIt's not necessary to include a criterion that at least one box is ordered, because this condition is automatically set for linked tables.\n:::\n\n::: {#prp-queries-customers-cher}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Wizard (group Queries)]{.uicontrol}. The dialog box ***New Query*** is displayed. Here you can select the query type.\n\n3.  Select [Simple Query Wizard]{.uicontrol} and click [OK]{.uicontrol}. In the following screen, you can select the fields you want in your query.\n\n4.  Select in [Tables/Queries]{.uicontrol} through the list box [Table: Customers]{.varname}. The fields of table [Customers]{.varname} are displayed in the box [Available Fields]{.uicontrol}, see @fig-q-wizard-t-customers.\n\n5.  Add the fields: [FirstName]{.varname}, [LastName]{.varname}, [Address]{.varname}, [ZipCode]{.varname}, [City]{.varname}.\n\n::: callout-note\nSelect the field, and click ![](images/common/button-add-field.png)\\]{.uicontrol}. You can also double click on a field to add or remove it.\n:::\n\n6.  Select table [Table: OrderDetails]{.varname} in box [Tables/Queries]{.uicontrol}. The fields of table [OrderDetails{.varname} are displayed in box [Available Fields]{.uicontrol}.\n\n7.  Add field [BoxCode]{.varname}.\n\n![Simple Query Wizard with selected fields.](images/queries/q-customers-cher-fields.png){#fig-q-customers-cher-fields}\n\n8.  click [Next]{.uicontrol}. Now you can specify if you like a detail or summary query.\n\n9.  Select [Detail (shows every field of every record)]{.uicontrol} and click [Next]{.uicontrol}.\n\n10. Name the query [Customers and CHER]{.varname}, select [Modify the query design]{.uicontrol} and click [Finish]{.uicontrol}. The query is saved and then appears in the design view.\n\n![Design query Customers and CHER.](images/queries/q-customers-cher-design.png){#fig-q-customers-cher-design}\n\n11. Enter `CHER` in column [BoxCode]{.varname} and row [Criteria]{.uicontrol} and don't let this field show.\n\n![Selection criteria in query design for CHER boxes.](images/queries/q-customers-cher-criteria.png){#fig-q-customers-cher-criteria}\n\n12. Switch to [Datasheet View]{.uicontrol}.\n\n13. Close the query and answer the question to save the changes with [Yes]{.uicontrol}.\n:::\n\n## Summarizing and Calculations {#sec-queries-summarizing}\n\nThe simple select queries work with individual records. When you select certain customers from the Customers table with a query, then you will see a record for each customer that meets the requirements. It is also possible to group your records and then perform calculations on the subgroups. That can be compared with the calculation of totals and subtotals.\n\nWhen a query is displayed in design view you see on the ribbon [tab Design \\> Totals (group Show/Hide)]{.uicontrol} the button ![Button totals](images/queries/button-totals.png)\n\nWith this button, you can show or hide a row [Total]{.uicontrol} in the design grid. Access adds a [Total]{.uicontrol} box for each field, just under the table box.\n\n![Query design with a visible row Total.](images/queries/q-pralines-box-design.png){#fig-q-pralines-box-design}\n\nFor each added box you can choose an option from the drop-down list. This option determines whether the field is used in a calculation or used for grouping or filtering. The available options can be divided into three categories:\n\nGrouping\n\n:   The choice is then: `Group By`. The field is used to get smaller groups on which you can perform calculations. This choice is also the default option.\n\nFiltering\n\n:   The choice is then: `Where`. The checkmark in the [Show]{.uicontrol} box is also cleared and should remain so. In the box [Criteria]{.uicontrol}, you can specify the value or expression for filtering.\n\nCalculations\n\n:   The options are: `Sum`, `Avg`, `Min`, `Max`, `Count`, `StDev`, `Var`, `First`, `Last`, `Expression`. The selected calculation is then performed for the field.\n\n| Choice in Total box | Description                                                        |\n|------------------|------------------------------------------------------|\n| `Group By`          | Subgroups records based on the values in this field.               |\n| `Sum`               | Adds together the values in this field.                            |\n| `Avg`               | Averages the values in this field.                                 |\n| `Min`               | Retains the smallest value in this field.                          |\n| `Max`               | Retains the largest value in this field.                           |\n| `Count`             | Counts the number of records (no matter which field you use).      |\n| `StDev`             | Calculates the standard deviation of the values in this field.     |\n| `Var`               | Calculates the variance of the values in this field.               |\n| `First`             | Retains the first value n this field.                              |\n| `Last`              | Retains the last value in this field.                              |\n| `Expression`        | Calculates a user-defined expression for the values in this field. |\n| `Where`             | For filtering only on values in this field.                        |\n\n:  Options for summarizing. {#tbl-grouping-options}\n\n### Calculated Field {.unnumbered}\n\nA calculated field takes data from one or more fields and performs some arithmetic to produce new information. You can perform simple arithmetic, like addition and multiplication, or use Access's built-in functions, such as `Sum` and `Avg`. You can only use fields that are added to the query. To create a calculated field\n\n1.  Click in an empty column in the field row.\n2.  Enter a name for the calculation (result) followed by a colon (`:`).\n3.  Enter the expression for the calculation.\n\n::: callout-note\n-   You can use field names in the expression. Field names must be surrounded by square brackets. If the field name contains no spaces, then Access puts the square brackets in for you after entering the name. If a field name contains spaces, you have to type in the square brackets yourself.\n\n-   When using one of the calculation options for summarizing, it is recommended to also add a new name in front of the field name, otherwise Access generates a name for the result in the datasheet view. This new name must also be followed by a colon.\n:::\n\nHere are some examples. Study them well. Create and experiment with them.\n\n::: {#exm-queries-praline-costs}\n**Average praline costs per chocolate type**\n\nIn this example the field [ChocolateType]{.varname} is used for grouping, creating a group for each chocolate type. The field [PralineCosts]{.varname} is used for the calculation of the average praline costs for each group. The result is a record for each chocolate type containing the average price.\n\n![Design query average praline costs per chocolate type.](images/queries/q-pralinecosts-chocolatetype-design.png){#fig-q-pralinecosts-chocolatetype-design}\n\n![Result query average praline costs per chocolate type.](images/queries/q-pralinecosts-chocolatetype-result.png){#fig-q-pralinecosts-chocolatetype-result}\n\nBecause the column for the averages didn't get a new name, Access generates as name [AvgOfPralineCosts]{.varname}.\n\n:::\n\n::: {#exm-queries-price-statistics}\n**Box price statistics**\n\nIn this example, field [BoxPrice]{.varname} is used 4 times with different calculations. Each column was given a new name. The result of the query is a single record containing the 4 results of the calculations.\n\n![Design query box price statistics.](images/queries/q-boxprice-statistics-design.png){#fig-q-boxprice-statistics-design}\n\n![Result query box price statistics.](images/queries/q-boxprice-statistics-result.png){#fig-q-boxprice-statistics-result}\n\n:::\n\n::: {#exm-queries-box-prices}\n**Average box price for boxes of more than 200 grams**\n\nCalculate the average price of boxes of more than 200 grams. The field Weight is used for filtering on boxes of more than 200 grams.\n\n![Design query average box price.](images/queries/q-boxprice-200g-design.png){#fig-q-boxprice-200g-design}\n\n![Result query average box price.](images/queries/q-boxprice-200g-result.png){#fig-q-boxprice-200g-result}\n\n:::\n\n## Customers per province {#sec-queries-customers-province}\n\nPurpose: Using a select query with grouping and a calculation with function `COUNT`.\n\nINFORMATION NEEDS\n\nMake a list of the number of customers per province.\n\nANALYSIS\n\nAll necessary data is in table [Customers]{.varname}. Of course, you need the field [Province]{.varname}. A customer is uniquely identified by the [CustomerCode]{.varname}, so that you need to count the number of CustomerCodes in each province. For this, there must be grouped by [Province]{.varname}.\n\n::: {#prp-queries-customers-province}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Design (group Queries)]{.uicontrol}. Access creates a new blank query window and displays the dialog box ***Show Table***.\n\n![Dialog box Show Table.](images/queries/q-show-table.png){#fig-q-show-table}\n\n3.  Select table [Customers]{.varname}, click [Add]{.uicontrol} and then [Close]{.uicontrol}. The table [Customers]{.varname} has now been added to the query window.\n\n4.  Add successively the fields [Province]{.varname} and [CustomerCode]{.varname} to the design grid by double-clicking on the field.\n\n![Design query customers per province](images/queries/q-customers-province-design.png){#fig-q-customers-province-design}\n\n5.  Click [tab Design \\> Totals (group Show/Hide)]{.uicontrol}.\n\n![Design expanded with row for total.](images/queries/q-customers-province-design-total.png){#fig-q-customers-province-design-total}\n\n6.  Click in the box [Total]{.uicontrol} under column [CustomerCode]{.varname} and select `Count`.\n\n![Grouping with count.](images/queries/q-customers-province-design-count.png){#fig-q-customers-province-design-count}\n\n7.  Switch to [Datasheet View]{.uicontrol}.\n\n![Result query customers per province.](images/queries/q-customers-province-result.png){#fig-q-customers-province-result}\n\n8.  Close the query and answer the question to save the changes with [Yes]{.uicontrol}. The dialog box ***Save as*** is displayed.\n\n9.  Name the query [Number of customers per province]{.varname} and click [OK]{.uicontrol}.\n:::\n\n## Column heading modification {#sec-queries-column-heading}\n\nHow to change the column heading in a query.\n\nTo perform this task, it is necessary that you have performed @sec-queries-customers-province.\n\nBy default, Access uses the field names as column headings in the datasheet view. And for summarized data, a name is generated. It is recommended to use clearer names.\n\n::: {#prp-queries-column-heading}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Open query [Number of customers per province]{.varname} in [Design View]{.uicontrol}.\n\n3.  Put the cursor in the field box [CustomerCode]{.varname}, at the beginning of the field name and type `Total customers:`.\n\n![Column heading modified.](images/queries/q-customers-province-columnhead-design.png){#fig-q-customers-province-columnhead-design}\n\n4.  Switch to [Datasheet View]{.uicontrol}.\n\n![Result with new column heading.](images/queries/q-customers-province-columnhead-result.png){#fig-q-customers-province-columnhead-result}\n\n5.  Close the query and answer the question to save the changes with [Yes]{.uicontrol}.\n:::\n\n## Calculate order amounts {#sec-queries-ordercalculation}\n\nINFORMATION NEEDS\n\nCreate a sorted list of order rows, showing per order: order code, box code, number of boxes, box price, and the amount for each row ( = each box).\n\nANALYSIS\n\nFor each order, you can find the OrderCode, BoxCode, and the number of boxes (Quantity) in table [OrderDetails]{.varname}. The BoxPrice is in the table [Boxes]{.varname}. The row amount is not present in any table, because this amount can be calculated from other data: `Amount = Quantity * BoxPrice`.\n\n::: {#prp-queries-ordercalculation}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Design (group Queries)]{.uicontrol}. Access creates a new blank query window and displays the dialog box ***Show Table*** (see @fig-q-show-table if necessary).\n\n3.  Add successively the tables [OrderDetails]{.varname} and [Boxes]{.varname} to the query window and then click [Close]{.uicontrol}.\n\n4.  Add successively the fields [OrderCode]{.varname}, [BoxCode]{.varname}, [Quantity]{.varname} (from table [OrderDetails]{.varname}), and [BoxPrice]{.varname} (from table [Boxes]{.varname}) to the grid by double-clicking on the field.\n\n![Design with tables and fields.](images/queries/q-orderrow-amount-design1.png){#fig-q-orderrow-amount-design1}\n\n5.  Set the sorting order for fields [OrderCode]{.varname} and [BoxCode]{.varname} on [Ascending]{.uicontrol}. Click in the field row of the first empty column and enter `Amount: Quantity\\*BoxPrice`. Access surrounds the fieldnamess with square brackets.\n\n![Design expanded with calculated field.](images/queries/q-orderrow-amount-design2.png){#fig-q-orderrow-amount-design2}\n\n6.  Switch to[Datasheet View]{.uicontrol}.\n\n![Result without formatting currencies.](images/queries/q-orderrow-amount-result-unformatted.png){#fig-q-orderrow-amount-result-unformatted}\n\n7.  Switch to [Design View]{.uicontrol}.\n\n::: callout-note\nAll objects in Access have properties. These properties determine, among other things, the appearance of the object. The setting of the properties is possible in the [Property Sheet]{.uicontrol}. You can switch the visibility of the Property Sheet on and off with [tab Design \\> Property Sheet (group Show/Hide)]{.uicontrol}. Faster is to using the keyboard shortcut [F4]{.uicontrol}.\n\nTo format the amounts as currencies, you need to change the property [Format]{.uicontrol} of field [Amount]{.varname}.\n:::\n\n8.  Make sure that the [Property Sheet]{.uicontrol} is visible. Click somewhere in field [Amount]{.varname}. Click in the box [Format]{.uicontrol} and choose with the list box the setting [Currency{.uicontrol}\n\n![Properties of field Amount.](images/queries/field-format-currency.png){#fig-field-format-currency}\n\n9.  Switch to[Datasheet View]{.uicontrol}.\n\n![Result with amounts formatted as currency.](images/queries/q-orderrow-amount-result-formatted.png){#fig-q-orderrow-amount-result-formatted}\n\n10. Close the query and answer the question to save the changes with [Yes]{.uicontrol}.\n\n11. Name the query [OrderRowAmount]{.varname} and click [OK]{.uicontrol}.\n:::\n\n## First order per customer {#sec-queries-first-order-dates}\n\nINFORMATION NEEDS\n\nCreate a list of the first order per customer. Show for each customer who has placed one or more orders: customer code, customer name (last and first name), and the date of the first order.\n\nANALYSIS\n\nThe required data is in the tables [Customers]{.varname} and [Orders]{.varname}. There you need to create a query showing the customer data and order data. Finding the first order can be realized by changing [Group By]{.uicontrol} with [Min]{.uicontrol} in row Total.\n\n::: {#prp-queries-first-order-dates}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Design (group Queries)]{.uicontrol}.\n\n3.  Add successively the tables [Customers]{.varname} and [Orders]{.varname} to the query window and then click [Close]{.uicontrol}.\n\n4.  Add successively the fields CustomerCode, LastName and FirstName (from Customers), and OrderDate (from Orders) to the grid by double-clicking on the field.\n\n5.  click [tab Design \\> Totals (group Show/Hide)]{.uicontrol}.\n\n6.  Change column title for [OrderDate]{.varname} by entering in front of the field name `First order date:`.\n\n![Tables and fields for query First order date.](images/queries/q-first-order-dates-design1.png){#fig-q-first-order-dates-design1}\n\n7.  Click in the box [Total]{.uicontrol} under column [OrderDate]{.varname} and select `Min`.\n\n8.  Set the sort order for [LastName]{.varname} and [FirstName]{.varname} on [Ascending]{.uicontrol}.\n\n![Design query first order per customer.](images/queries/q-first-order-dates-design2.png){#fig-q-first-order-dates-design2}\n\n9.  Switch to[Datasheet View]{.uicontrol}.\n\n![Result query first order date.](images/queries/q-first-order-dates-result.png){#fig-q-first-order-dates-result}\n\n10. Close the query and answer the question to save the changes with [Yes]{.uicontrol}.\n\n11. Name the query [First order dates]{.varname} and click [OK]{.uicontrol}.\n:::\n\n## Parameter query {#sec-queries-parameters}\n\nA parameter query is a query that displays a dialog box that prompts the user to provide additional information during the execution, such as criteria for retrieving records or a value that you want to insert into a field. You can design the query so that multiple data is requested, for example, a start and end date. Then all the records can be retrieved with dates between them.\n\nParameter queries are also easy as a basis for forms and reports. Based on a parameter query, you can for example create a monthly revenue report. When printing the report you are prompted by a dialog box which month you want to print, you enter the month, and then the correct report will be printed.\n\nINFORMATION NEEDS\n\nIn company Snoopy one gets regular customer questions over the phone about a particular order. You want to quickly be able to answer such a question. The goal now is to get the data from a particular order quickly on the screen. That is possible with a parameter query, asking for the order code during the execution of the query.\n\nANALYSIS\n\nThe necessary information about a particular order is in the tables [Orders]{.varname} and [OrderDetails]{.varname}. Questions about the order code can be controlled via a criterion.\n\n::: {#prp-queries-parameter}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Design (group Queries)]{.uicontrol}.\n\n3.  Add tables [Orders]{.varname} and [OrderDetails]{.varname} to the query window and then click [Close]{.uicontrol}.\n\n4.  Add successively the fields OrderCode, CustomerCode, OrderDate (from Orders), and BoxCode en Quantity (from OrderDetails) to the grid by double-clicking on the field.\n\n![Tables and fields for query.](images/queries/q-information-order-design1.png){#fig-q-information-order-design1}\n\n5.  Click in the box [Criteria]{.uicontrol} under column [OrderCode]{.varname} and type `[Enter order code]`.\n\n![Criterion added to the query.](images/queries/q-information-order-design2.png){#fig-q-information-order-design2}\n\n6.  Switch to [Datasheet View]{.uicontrol}. The dialog box ***Enter Parameter Value*** appears and asks you to enter the order code.\n\n7.  Enter a value, e.g. `30`, and click [OK]{.uicontrol}.\n\n![Results for order with order code 30.](images/queries/q-information-order-result.png){#fig-q-information-order-result}\n\n8.  Close the query and answer the question to save the changes with [Yes]{.uicontrol}.\n\n9.  Name the query [Information specific order]{.varname} and click [OK]{.uicontrol}.\n:::\n\n## Action Queries {#sec-queries-actions}\n\nThe majority of queries are select queries, which are used to search, collect, and display data, but not to change this data. But Access has also another category of queries with which you can change deleting, updating, or adding records, known as action queries. The big advantage of an action query is that it can change a large number of records without having programming knowledge. The way you make these queries and the way of working is almost the same: first, create a select query and then change the query type.\n\nAccess has four types of action queries:\n\nMake Table\n\n:   Selects one or more records and then create a new table for them. This new table can be placed in the opened database, but can also as a new table to be made in a different database. You can use a Make Table query for example to copy outdated data to an archive database.\n\nAppend\n\n:   Selects one or more records and then adds them to another existing table. For example, suppose that you acquire some new customers and the information has been stored in a separate table. With an append query, you can move the records to your customers table.\n\nDelete\n\n:   Deletes one or more records. You specify a set of filter conditions and then deletes the matching records. For example, you can remove products that are discontinued.\n\nUpdate\n\n:   Change values in one or more records. The existing values in a field are replaced by new values, a type of search and replace. You can't undo the changes and therefore it is advisable to first backup (copy) of the database or the table before you run the update query.\n\nBecause these queries change data in the database, these queries could be a security risk. To provide protection, a number of checks are carried out in Access and the Trust Center. The trust center can disable the content. When opening such a database, Access displays a message with a security warning.\n\n![Message with security warning.](images/common/security-warning.png){#fig-securitywarning}\n\nIf you want to enable the content, click [Enable Content \\> Options]{.uicontrol} and choose the desired option in the dialog box that appears. The database is opened again with full functionality.\n\nIt is also advisable to make a backup of the tables that are changed. That 's easy to do with copy and paste.\n\n::: {#exm-queries-copy-table}\n**Creating a copy of a table**\n\n1.  In the navigation pane, right-click on the name of the table and select from the shortcut menu [Copy]{.uicontrol}.\n2.  Right-click again and choose now [Paste]{.uicontrol} and give the new table a different name.\n\nTo recover a table after a change, proceed as follows:\n\n1.  In the navigation pane, right-click on the name of the changed table and select from the shortcut menu [Cut]{.uicontrol}.\n2.  Right-click on the name op the copy and choose [Rename]{.uicontrol} and give the table the original name.\n\n:::\n\n## Update query {#sec-queries-action-update}\n\nAn example of a simple update query that changes the values in a field for all records which satisfy a certain condition.\n\nINFORMATION NEEDS\n\nThe costs of all pralines with chocolate type white should be increased by 10%.\n\nANALYSIS\n\nAll necessary data is in table [Pralines]{.varname}. You need the fields [ChocolateType]{.varname} and \\[PralineCosts\\]{.varname. Selecting the white chocolate types can be done by adding a criterion to the query. You can increase the PralineCosts by 10% by multiplying the current value with `1.1`.\n\nMake a backup (copy) of the table, so you can restore the original situation. Another possibility is to backup (copy) the whole database.\n\n::: {#prp-queries-action-update}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Design (group Queries)]{.uicontrol}.\n\n3.  Add table [Pralines]{.varname} to the query window and then click\\*\\*Close\\]{.uicontrol}.\n\n4.  Add successively the fields [ChocolateType]{.varname} and [PralineCosts]{.varname} to the grid by double-clicking on the field.\n\n5.  Change the query type with [tab Design \\> Update (group Query Type)]{.uicontrol}. The [Sort]{.uicontrol} and [Show]{.uicontrol} rows disappear and there is a new row [Update To]{.uicontrol}.\n\n![Tables and fields for update query.](images/queries/q-increase-costs-design1.png){#fig-q-increase-costs-design1}\n\n6.  Click in the box [Criteria]{.uicontrol} under column [ChocolateType]{.varname} and enter `White`.\n\n7.  Click in box [Update To]{.uicontrol} under column [PralineCosts]{.varname} and type `[PralineCosts]*1.1`.\n\n![Design update query.](images/queries/q-increase-costs-design2.png){#fig-q-increase-costs-design2}\n\n::: callout-note\nAccess surrounds the text with double-quotes. Field names must be surrounded by square brackets.\n:::\n\n8.  Save the query with button [Save]{.uicontrol} (![](images/common/button-save.png)) on the [Quick Access Toolbar]{.uicontrol} and name the query [Increase costs white chocolates with 10%]{.varname}.\n\n9.  click ![](images/queries/button-run.png) [tab Design \\> Run (group Results)]{.uicontrol}. A dialog appears asking for confirmation.\n\n10. click [Yes]{.uicontrol}.\n\n11. Close the query.\n:::\n\n## Make Table query {#sec-queries-action-maketable}\n\nPurpose: Creating a new table with the Make Table query.\n\nINFORMATION NEEDS\n\nThe marketing department has a special offer for all customers in Friesland. For this, they need a table with only the customer data for customers in the province Friesland.\n\nANALYSIS\n\nAll necessary data is in table [Customers]{.varname}. Selecting for Friesland can be done with a criterion in the query. First, you need to create this select query and then change the query type to [Make Table]{.uicontrol}.\n\n::: {#prp-queries-action-maketable}\n[File]{.smallcaps}: `{{< var database >}}`\n\n**Create select query**\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Design (group Queries)]{.uicontrol}.\n\n3.  Add table [Customers]{.varname} to the query window and then click [Close]{.uicontrol}.\n\n4.  Add all fields by double-clicking on the asterisk (`*`) and then add separate again the field [Province]{.varname}.\n\n5.  Enter as criterion `\"FR\"` for the field [Province]{.varname} and don't show this extra field, because it is in fact already shown by [Customers]{.varname}.\n\n![Design Make Table query.](images/queries/q-customers-friesland-design.png){#fig-q-customers-friesland-design}\n\n6.  Check the output of the query with the [Datasheet View]{.uicontrol}.\n\n7.  Save the query with the name [Customers Friesland]{.varname}.\n\n**Change the query type**\n\n8.  Open the query [Customers Friesland]{.varname} in [Design View]{.uicontrol}.\n\n9.  click [Design \\> Make Table (group Query Type)]{.uicontrol}. The dialog box ***Make Table*** opens.\n\n10.  Name the new table [Friesland customers]{.varname} and select that this table should come in the current database.\n\n![Specify name and location of the new table and the database.](images/queries/q-maketable-dialogbox.png){#fig-q-maketable-dialogbox}\n\n11.  click [OK]{.uicontrol}.\n\n12.  click ![](images/queries/button-run.png) [tab Design \\> Run (group Results)]{.uicontrol}. A dialog appears asking for confirmation.\n\n13.  click [Yes]{.uicontrol}. The new table is created.\n\n14.  Close the query. A dialog box asking whether the changes should be saved.\n\n15.  click [Yes]{.uicontrol}.\n\n::: callout-note\nThis is because the query type has been changed. This is also seen in the navigation pane under [Queries]{.uicontrol}.\n\nThe query icon in front of the query name indicates that it's an action query: ![](images/queries/q-maketable-icon.png)\n:::\n:::\n\n## Crosstab query {#sec-queries-crosstab}\n\nA crosstab query calculates a sum, average, or other aggregate function, and then groups the results in rows and columns. A cross table is similar to an Excel PivotTable report. A crosstab query is often easier to read than a regular select query with the same data. The overview is more compact by the horizontal and vertical alignment.\n\nWhen you create a crosstab query, you specify which fields contain row headings, which field contains column headings, and which field contains values to summarize. For the row headings you can use multiple fields (maximum 3), but for the column heading values and the values to summarize you can use only one field. It's also possible to use an expression for the row heading(s), the column heading(s), and to summarize values.\n\nThe easiest and fastest way to create a crosstab query is using the [Crosstab Query Wizard]{.uicontrol}. For more complex queries, you can often start with this Wizard, and then do the fine-tuning in the Design View.\n\nINFORMATION NEEDS\n\nCalculate the number of customers by province and by region and show the result in a cross table.\n\nANALYSIS\n\nAll the necessary data can be found in table [Customers]{.varname}.\n\n::: {#prp-queries-crosstab}\n[File]{.smallcaps}: `{{< var database >}}`\n\n1.  Open the database.\n\n2.  Choose [tab Create \\> Query Wizard (group Queries) \\> Crosstab Query Wizard \\> OK]{.uicontrol}.\\\n    In the screen that is displayed now, you can select the table or query that contains the fields for the crosstab.\n\n3.  Select table [Customers]{.varname} and click [Next]{.uicontrol}. Now you can select the field(s) for the row heading values.\n\n4.  Add field [Province]{.varname}.\n\n![Selection of field for row heading.](images/queries/q-crosstab-rowhead.png){#fig-q-crosstab-rowhead}\n\n5.  click [Next]{.uicontrol}. Now you have to select the field for the column heading values.\n\n6.  Select field [Region]{.varname}.\n\n![Selection of field for column heading.](images/queries/q-crosstab-columnhead.png){#fig-q-crosstab-columnhead}\n\n7.  click [Next]{.uicontrol}. Now you can select the field whose values you want to aggregate and the aggregate function.\n\n8.  Select field [CustomerCode]{.varname} and function `Count`. Also, deselect the option to include row sums.\n\n![Selection of field and function for summarizing.](images/queries/q-crosstab-values.png){#fig-q-crosstab-values}\n\n9.  click [Next]{.uicontrol}.\n\n10. Name the query [Number of customers by province by region]{.varname}. Select [View the query]{.uicontrol}, and click [Finish]{.uicontrol}.\n\n![Crosstabb result.](images/queries/q-crosstab-result.png){#fig-q-crosstab-result}\n:::\n\n## Exercises {#sec-queries-exercises}\n\n::: {#exr-quer001}\n**Customers from Friesland and Groningen (quer001)**\n\nCreate a query to select customers in the provinces of Friesland and\nGroningen. Show LastName, FirstName, and City. Name the query\n[quer001]{.varname}.\n\n\n<div class='webex-solution'><button>Tip</button>\n The field [Province]{.varname} may have two values here\n`FR` or `GR`. You can get done this by entering one value in the row\n[Criteria]{.uicontrol} and the other value in the row [or]{.uicontrol}.\n\nAnother possibility is using an expression with the Or operator in row\n[Criteria]{.uicontrol}. \n</div>\n\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 40 customers \n</div>\n\n:::\n\n::: {#exr-quer002}\n**Direct mail campaign box MARZ (quer002)**\n\nSuppose it is the end of December 2010. The expiration date of the box\nMARZ is in sight and there is still plenty in stock. That's why do you\nwant to start a direct mail campaign to the customers who have ordered\nat least one box MARZ in the period August-November 2010. Show the name\nand address of the customers. Name the query [quer002]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 4 customers \n</div>\n\n:::\n\n::: {#exr-quer003}\n**Praline boxes with low price (quer003)**\n\nCreate a list of boxes whose price is at most \\$ 17.50. Show the fields\nBoxCode, BoxName, and BoxPrice. Name the query [quer003]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 4 boxes \n</div>\n\n:::\n\n::: {#exr-quer004}\n**Pralines milk and dark with low price (quer004)**\n\nCreate a list of pralines with chocolate type milk or pure and whose\ncosts are at most 30 cents. Show the fields PralineCode, PralineName,\nChocolateType, and PralineCosts. Name the query [quer004]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 18 pralines \n</div>\n\n:::\n\n::: {#exr-quer005}\n**Customers from Enschede, Hengelo or Almelo (quer005)**\n\nCreate a list of all the customers (name and address) who live in\nEnschede, Hengelo, and Almelo. Name the query [quer005]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 12 customers \n</div>\n\n:::\n\n::: {#exr-quer006}\n**Customers from Amsterdam with zip code `20*` (quer006)**\n\nCreate a list with customers from Amsterdam (name and address) whose zip\ncode begins with 20. Name the query [quer006]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 3 customers \n</div>\n\n:::\n\n::: {#exr-quer007}\n**Pralines without filling (quer007)**\n\nCreate a list of all pralines without filling. Name the query\n[quer007]{.varname}.\n\n\n<div class='webex-solution'><button>Tip</button>\n Try to find first what value the field Type has for\npralines without filling. \n</div>\n\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 12 pralines \n</div>\n\n:::\n\n::: {#exr-quer008}\n**Customers outside Amsterdam (quer008)**\n\nCreate a list of all customers who do not live in Amsterdam. Name the\nquery [quer008]{.varname}.\n\n\n<div class='webex-solution'><button>Tip</button>\n First find out what operator to use in a test for not\nequal to. \n</div>\n\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 293 customers \n</div>\n\n:::\n\n::: {#exr-quer009}\n**Number of pralines per box (quer009)**\n\nCreate a list of all box names with their number of pralines per box.\nThe column with numbers should have an appropriate title. The list\nshould be sorted in ascending order of box name. Name the query\n[quer009]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer009-result.png) \n</div>\n\n:::\n\n::: {#exr-quer010}\n**Number of praline types per box (quer010)**\n\nCreate a list of box names and their number of praline types per box.\nThe column with numbers should have an appropriate title. The list\nshould be sorted in ascending order of box name. Name the query\n[quer010]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer010-result.png) \n</div>\n\n:::\n\n::: {#exr-quer011}\n**Number of orders per region (quer011)**\n\nCreate a list of the number of orders per region. The column with\nnumbers should have an appropriate title. Name the query\n[quer011]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer011-result.png) \n</div>\n\n:::\n\n::: {#exr-quer012}\n**Total sales per customer (quer012)**\n\nCreate a list with the total sales per customer. Show customer code,\ncustomer name, and the total sales. The column with sales should have an\nappropriate title and formatting. Sort on descending sales. Name the\nquery [quer012]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer012-result.png) \n</div>\n\n:::\n\n::: {#exr-quer013}\n**Customers with orders (quer013)**\n\nCreate a list of customers (code and name) who have ever bought\nsomething. Name the query [quer013]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 264 customers \n</div>\n\n:::\n\n::: {#exr-quer014}\n**Customers with last name Jansen or Janssen in region North (quer014)**\n\nCreate a list of customers with last name Jansen or Janssen in the\nregion North. Name the query [quer014]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer014-result.png) \n</div>\n\n:::\n\n::: {#exr-quer015}\n**Pralines with filling and without nut (quer015)**\n\nCreate a list of pralines with filling and without nuts. Name the query\n[quer015]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 22 pralines\n\n![](images/queries/quer015-result.png) \n</div>\n\n:::\n\n::: {#exr-quer016}\n**Boxes heavier than 150 grams with a maximum price of \\$35 (quer016)**\n\nCreate a list of boxes heavier than 150 grams with a maximum price of\n\\$35. Show only BoxCode, BoxName, and BoxPrice. Sort the boxes by\nascending price. Name the query [quer016]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer016-result.png) \n</div>\n\n:::\n\n::: {#exr-quer017}\n**Boxes with a price between \\$17 and \\$25 and stock of at least 400 (quer017)**\n\nCreate a list of boxes with a price between \\$17 and \\$25 and of which\nthere are at least 400 in stock. Show the code, name, price, and stock\nof the boxes. Name the query [quer017]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer017-result.png) \n</div>\n\n:::\n\n::: {#exr-quer018}\n**Total sales per province (quer018)**\n\nCreate a list of total sales per province. The column with sales should\nhave an appropriate title and formatting. Sort descending on sales. Name\nthe query [quer018]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer018-result.png) \n</div>\n\n:::\n\n::: {#exr-quer019}\n**Customers with orders the week before Christmas (quer019)**\n\nCreate a list of customers who ordered the last week before Christmas\n2010 (12/20/2010 until 12/24/2010). Show code, name, and address of\nthese customers. Each customer may occur only one time in the overview.\nName the query [quer019]{.varname}.\n\n\n<div class='webex-solution'><button>Tip</button>\n The same customer may exist on the list more than one\ntime. To avoid this, the value of the query property Unique Values\nshould be Yes. \n</div>\n\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer019-result.png) \n</div>\n\n:::\n\n::: {#exr-quer020}\n**Boxes with low sales (quer020)**\n\nCreate a list of boxes with low sales, less than \\$2000. Show box code\nand sales. Sort ascending on sales. The column with sales should have an\nappropriate title and formatting. Name the query [quer020]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer020-result.png) \n</div>\n\n:::\n\n::: {#exr-quer021}\n**Customers with zip code 22 and total sales less than \\$50 (quer021)**\n\nCreate a list of customers whose zip code is starting with 22 and with a\ntotal sales of at most \\$50. Name the query [quer021]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer021-result.png) \n</div>\n\n:::\n\n::: {#exr-quer023}\n**Customers for Sweet and Bitter (quer023)**\n\nCreate an alphabetic list of customers who bought in 2009 at least 1 box\n\"Sweet and Bitter\". Avoid double records in the result. Name the query\n[quer023]{.varname}.\n\n\n<div class='webex-solution'><button>Tip</button>\n The same customer may exist on the list more than one\ntime. To avoid this, the value of the query property Unique Values\nshould be Yes. \n</div>\n\n\n\n<div class='webex-solution'><button>Answer</button>\n Result query: 96 customers\n\n![](images/queries/quer023-result.png) \n</div>\n\n:::\n\n::: {#exr-quer024}\n**quer024 - Cities with at least 2 customers (quer024)**\n\nCreate an alphabetic list of cities with at least 2 customers. Name the\nquery [quer024]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer024-result.png) \n</div>\n\n:::\n\n::: {#exr-quer025}\n**Parameter chocolate type pralines (quer025)**\n\nThere are several types of chocolate types for the pralines:\nButterscotch, Milk, Dark, Toffee, and White. Create a parameter query to\nshow the pralines whose type is requested during the execution of the\nquery. Show ChocolateType, PralineName, PralineCosts and\nPralineDescription. Name the query [quer025]{.varname}.\n:::\n\n::: {#exr-quer026}\n**Update query price reduction (quer026)**\n\nDue to a decline in the price of chocolate in the world market, the\nprices of all boxes can be reduced by 15%. Name the query\n[quer026]{.varname}.\n\n1.  Start with making a backup or copy of the whole database.\n2.  Design an update query to implement this reduction. Name the query\n    [quer026]{.varname} and run the query.\n3.  Restore the original situation from the backup.\n\n::: {.callout-warning)\n-   Making a backup is important because you cannot revert the execution\n    of the query.\n-   Be aware that every time you run the query, the prices are again\n    reduced by 15%.\n:::\n:::\n\n::: {#exr-quer027}\n**Crosstab boxes per weight (quer027)**\n\nCreate a crosstab query with vertical the box names, horizontal the\nweight of the boxes, and in the table the stock. Name the\n[quer027]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer027-result.png) \n</div>\n\n:::\n\n::: {#exr-quer028}\n**Update query price increase (quer028)**\n\nDue to an increase in the chocolate price on the world market, prices of\nall boxes must be increased by 10%.\n\n1.  Start by making a backup or copy of the table or of the entire\n    database.\n2.  Design an update query to implement the price increase. Name the\n    query [quer028]{.varname} and execute it.\n3.  Restore the original situation.\n\n::: {.callout-warning)\n-   Making a backup is important because you cannot revert the execution\n    of the query.\n-   Be aware that each time you execute the query, the prices are\n    further increased by 10%.\n:::\n:::\n\n::: {#exr-quer029}\n**Crosstab sales per customer per month (quer029)**\n\nCreate with a crosstab query an overview of the total sales per customer\nper month in 2010. To do that, create first a selection query Sales per\ncustomer per month in 2010 and use this query as source for the crosstab\nquery. Display customers with the customer number and the months with\nthe month numbers. Display also the total sales for the customer in\n2010. Name the crosstab query [quer029]{.varname}.\n\n\n<div class='webex-solution'><button>Answer</button>\n ![](images/queries/quer029-result.png) \n</div>\n\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}